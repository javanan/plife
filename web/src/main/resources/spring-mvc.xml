<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

    <description>Spring MVC Configuration</description>

    <!-- 加载配置属性文件 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:jlife.properties"/>


    <!--<context:component-scan base-package="com.jlife.*" />-->
    <!-- 自动扫描且只扫描@Controller -->
  <context:component-scan base-package="com.jlife.*.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>


    <!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="prettyPrint" value="false"/>
                <!-- <property name="objectMapper">
                     <bean class="com.thinkgem.jeesite.common.mapper.JsonMapper"></bean>
                 </property> -->
            </bean>
            <!-- 使用XML格式输出数据 -->
            <!--  <bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
                  <constructor-arg>
                      <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                          <property name="streamDriver">
                              <bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>
                          </property>
                          <property name="annotatedClasses">
                              <list>
                                  <value>com.thinkgem.jeesite.common.persistence.BaseEntity</value>
                                  <value>com.thinkgem.jeesite.common.supcan.treelist.TreeList</value>
                                  <value>com.thinkgem.jeesite.common.supcan.treelist.cols.Col</value>
                                  <value>com.thinkgem.jeesite.common.supcan.treelist.cols.Group</value>
                              </list>
                          </property>
                      </bean>
                  </constructor-arg>
                  <property name="supportedMediaTypes" value="application/xml"></property>
              </bean>-->
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <map>
                <entry key="xml" value="application/xml"/>
                <entry key="json" value="application/json"/>
            </map>
        </property>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="true"/>
    </bean>




    <bean name="beetlConfig" class="org.beetl.ext.spring.BeetlGroupUtilConfiguration" init-method="init">
        <property name="configFileResource" value="classpath:beetl.properties"/>
        <property name="resourceLoader" ref="classpathResourceLoader"/>
    </bean>

    <bean name="classpathResourceLoader" class="org.beetl.core.resource.ClasspathResourceLoader">
        <constructor-arg name="root" value="/"></constructor-arg>
    </bean>

    <bean name="beetlViewResolver" class="org.beetl.ext.spring.BeetlSpringViewResolver">
        <!--多视图解析器，需要设置viewNames和order-->
       <!-- <property name="viewNames">
            <list>
                <value>/btl/**</value>
                <value>/user/**</value>
                <value>/sys/**</value>
            </list>
        </property>-->
        <property name="order" value="0"/>
        <property name="suffix" value=".html"/>
        <property name="config" ref="beetlConfig"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
    </bean>


    <!-- 定义视图文件解析 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="1"/>
        <property name="prefix" value="${mvc.view.prefix}"/>
        <property name="suffix" value="${mvc.view.suffix}"/>
    </bean>



    <!--在SpringMVC3.0之前使用 静态资源映射 -->
   <!-- <mvc:resources mapping="/static/**" location="/static/" cache-period="31536000"/>
    <mvc:resources mapping="/assets/**" location="/assets/" cache-period="31536000"/>-->

    <!--在SpringMVC3.0之后推荐使用  静态资源访问 -->
    <!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
    <mvc:default-servlet-handler/>


    <!-- 定义无Controller的path<->view直接映射 -->
    <mvc:view-controller path="/" view-name="redirect:${mvc.view.index}"/>


</beans>