<?xml version="1.0" encoding="UTF-8"?>
<!-- lang: xml-->
<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 -->
<!-- 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志-->


<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，
   默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->


<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 定义日志文件 输入位置 -->
    <property name="log_dir" value="../logs/jlife/"/>
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="30"/>

    <!--生产环境 输出到控制台-->
    <appender name="proConsole" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--开发环境 输出到控制台-->
    <appender name="devConsole" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%caller{1} %d [%thread] %-5level ---> %msg%n</pattern>
        </encoder>
    </appender>

    <!--生产环境 输出到文件的日志 天滚动-->
    <appender name="profile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录WARN级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_dir}%d{yyyy-MM-dd}jlife.log.zip</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>%d %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--开发环境 输出到文件的日志 天滚动-->
    <appender name="devFile" class="ch.qos.logback.core.rolling.RollingFileAppender">


        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_dir}%d{yyyy-MM-dd}jlife.log.zip</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>%caller{1} %d [%thread] %-5level ---> %msg%n</pattern>
        </encoder>

    </appender>


    <!--com.jlife：类的全路径  仅仅打印jlife日志-->
    <logger name="com.jlife" additivity="true"></logger>

    <root level="DEBUG">

        <appender-ref ref="devFile"/>
        <appender-ref ref="devConsole"/>

    </root>

</configuration>